#
# KARL Framework - Gradle Build Configuration Properties
#
# This properties file contains enterprise-grade build system optimizations and configuration
# settings for the KARL (Kotlin Adaptive Reasoning Learner) framework. These properties are
# carefully tuned to provide optimal performance, reliability, and developer experience while
# supporting the sophisticated multi-module architecture and advanced technology stack employed
# by the KARL ecosystem.
#
# **Build System Philosophy:**
# The KARL framework build configuration prioritizes developer productivity, build performance,
# and enterprise-grade reliability. These settings enable efficient development workflows while
# ensuring consistent, reproducible builds across diverse development environments and deployment
# scenarios. The configuration balances cutting-edge language features with production stability.
#
# **Performance Optimization Strategy:**
# This configuration employs comprehensive performance optimization techniques including parallel
# execution, incremental compilation, aggressive caching, and memory optimization to minimize
# build times and maximize developer productivity during the development of sophisticated
# adaptive learning systems with complex dependency graphs.
#
# **Enterprise Compatibility:**
# All settings are carefully selected to ensure compatibility with enterprise development
# environments, CI/CD pipelines, and production deployment scenarios while leveraging modern
# JVM capabilities and Kotlin language features for optimal performance and developer experience.
#
# @project karl-framework
# @version 1.0.0
# @author KARL Development Team
# @since 2025-08-02
#

# ========================================
# KOTLIN COMPILER CONFIGURATION
# ========================================
#
# Advanced Kotlin compiler settings optimized for enterprise development with sophisticated
# multi-module architectures, machine learning workloads, and reactive UI development patterns.

# Kotlin Code Style Enforcement
# Enforces official Kotlin coding standards across the entire framework ecosystem,
# ensuring consistent code formatting, naming conventions, and structural patterns
# that facilitate collaboration, code review, and long-term maintainability.
# This setting integrates with IDE formatting and automated code quality tools.
kotlin.code.style=official

# Kotlin Compiler Execution Strategy
# Configures the Kotlin compiler to run within the Gradle daemon process (in-process)
# rather than spawning separate compiler processes. This optimization significantly
# reduces compilation overhead, improves build performance, and enables better memory
# management for large multi-module projects with complex dependency graphs.
# Critical for efficient development of ML-intensive applications with frequent recompilation.
kotlin.compiler.execution.strategy=in-process

# Incremental Compilation Optimization
# Enables Kotlin's sophisticated incremental compilation system, which intelligently
# recompiles only the source files that have changed or are affected by changes.
# This dramatically reduces build times during development, especially crucial for
# iterative development of adaptive learning algorithms and reactive UI components.
# Maintains compilation accuracy while maximizing developer productivity.
kotlin.incremental=true

# Kotlin Native Compiler Daemon Configuration
# Disables the Kotlin Native compiler daemon to prevent potential memory leaks and
# resource conflicts in enterprise CI/CD environments. While the framework currently
# targets JVM platforms, this setting ensures compatibility with future Kotlin Native
# expansions and maintains clean build environments in automated deployment pipelines.
kotlin.native.disableCompilerDaemon = true

# Module Archive Output Configuration
# Disables the treatment of task outputs as friend modules in the archive system,
# preventing potential module boundary violations and ensuring clean separation
# between framework modules. This setting maintains architectural integrity and
# supports proper encapsulation in the multi-module KARL ecosystem.
kotlin.build.archivesTaskOutputAsFriendModule=false
# ========================================
# GRADLE BUILD SYSTEM OPTIMIZATION
# ========================================
#
# Comprehensive Gradle build system optimizations designed for high-performance development
# of sophisticated multi-module frameworks with machine learning capabilities, reactive UI
# components, and enterprise-grade reliability requirements.

# JVM Memory Configuration for Framework Development
# Allocates 2GB of heap memory to the Gradle daemon, optimized for building complex
# multi-module projects with machine learning dependencies, comprehensive documentation
# generation, and sophisticated code analysis. The UTF-8 encoding ensures proper handling
# of international characters in documentation, comments, and string literals throughout
# the framework ecosystem. This configuration balances memory efficiency with build performance.
org.gradle.jvmargs=-Xmx2g -Dfile.encoding=UTF-8

# Parallel Build Execution
# Enables Gradle's parallel execution capabilities, allowing multiple modules to be built
# simultaneously when their dependency graphs permit. This optimization is particularly
# beneficial for the KARL framework's multi-module architecture, significantly reducing
# overall build times during development and CI/CD pipeline execution. Critical for
# maintaining developer productivity with complex dependency relationships.
org.gradle.parallel=true

# Build Output Verbosity Configuration
# Configures Gradle to provide verbose console output during build execution, offering
# detailed feedback on build progress, task execution, and potential issues. This setting
# is invaluable for debugging complex build scenarios, understanding performance bottlenecks,
# and maintaining transparency in automated CI/CD environments where detailed logging
# is essential for troubleshooting and optimization.
org.gradle.console=verbose

# Build Caching Optimization
# Enables Gradle's sophisticated build caching system, which intelligently caches task
# outputs and reuses them when inputs haven't changed. This optimization dramatically
# improves build performance for repeated builds, especially beneficial during iterative
# development of machine learning algorithms and UI components where frequent rebuilds
# are common. Supports both local and remote caching for enterprise CI/CD scenarios.
org.gradle.caching=true
# ========================================
# JAVA DEVELOPMENT ENVIRONMENT MANAGEMENT
# ========================================
#
# Advanced Java development environment configuration ensuring consistent, optimal JVM
# utilization across diverse development environments while supporting the latest Java
# features essential for high-performance machine learning and reactive UI development.

# Automatic Java Installation Detection
# Enables Gradle's intelligent Java installation detection system, which automatically
# discovers and catalogues all available JDK installations on the development machine.
# This capability ensures optimal JDK selection for different build tasks and supports
# the framework's Java 21 target requirements while maintaining compatibility with
# enterprise development environments that may have multiple JDK versions installed.
org.gradle.java.installations.auto-detect=true

# Automatic Java Distribution Download
# Enables Gradle's automatic JDK download and management capabilities, ensuring that
# the required Java 21 runtime is available even in fresh development environments
# or automated CI/CD systems. This feature eliminates manual JDK setup requirements
# and ensures consistent Java runtime environments across all development and
# deployment scenarios, critical for reproducible builds and enterprise adoption.
org.gradle.java.installation.auto-download=true

# ========================================
# FRAMEWORK-SPECIFIC CONFIGURATION
# ========================================
#
# Specialized configuration properties for the KARL framework ecosystem, including
# dependency version management and module-specific optimizations that support the
# sophisticated privacy-first adaptive learning architecture.

# Android Room Database Version Configuration
# Specifies the Android Room database framework version used throughout the KARL
# ecosystem for privacy-first data persistence. Room 2.7.1 provides mature, production-ready
# database capabilities with comprehensive Kotlin coroutines integration, advanced query
# optimization, and robust schema migration support essential for the framework's
# local-only data processing requirements and enterprise-grade reliability standards.
roomVersion=2.7.1